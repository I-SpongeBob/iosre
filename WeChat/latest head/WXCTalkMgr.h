//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "MMService.h"

#import "AUAudioDataSource.h"
#import "AVAudioPlayerDelegate.h"
#import "IAUAudioDeviceExt.h"
#import "MMKernelExt.h"
#import "MMService.h"
#import "WXCCNetworkStatusExt.h"
#import "WXCNetWorkDelegate.h"

@class MMTimer, NSMutableArray, NSMutableSet, NSObject<OS_dispatch_queue>, NSRecursiveLock, NSString, WXCTalkRoomData, WXTalkComponent;

@interface WXCTalkMgr : MMService <WXCCNetworkStatusExt, AUAudioDataSource, AVAudioPlayerDelegate, IAUAudioDeviceExt, MMKernelExt, MMService, WXCNetWorkDelegate>
{
    NSMutableArray *_mLastInviteUuidList;
    _Bool _isDataConnected;
    _Bool _isAudioDeviceStarted;
    _Bool _isReceiveOtherData;
    _Bool _isSelfAndOtherEnter;
    _Bool _isFirstConnnected;
    NSObject<OS_dispatch_queue> *_taskQueue;
    _Bool mIsInTalking;
    _Bool mIsTalkingInterrupt;
    unsigned int mNextBannerClickTimeLimit;
    int _mNetSceneState;
    int _mCntTryStartAudioDev;
    int _mStartDevScene;
    unsigned int _heartbeatInterval;
    unsigned int _joinLimitInterval;
    WXCTalkRoomData *_roomData;
    WXTalkComponent *_component;
    NSRecursiveLock *_audioEncLock;
    NSRecursiveLock *_audioDecLock;
    MMTimer *_wxTalkTimer;
    MMTimer *_wxCheckTalkStatusTimer;
    MMTimer *_wxCheckTalkStatusMoreSensitiveTimer;
    struct __sFILE *_recordDumpFile;
    MMTimer *_mSystemCallHoldTimer;
    MMTimer *_wxHeartbeatTimeoutTimer;
    MMTimer *_mFrequentEnterTimer;
    MMTimer *_mFrequentAckTimer;
    NSMutableSet *_mReceiveMsgIdSet;
}

+ (int)cpuCapacity;
+ (unsigned int)GetNetType;
@property(retain, nonatomic) NSMutableSet *mReceiveMsgIdSet; // @synthesize mReceiveMsgIdSet=_mReceiveMsgIdSet;
@property(nonatomic) unsigned int joinLimitInterval; // @synthesize joinLimitInterval=_joinLimitInterval;
@property(nonatomic) unsigned int heartbeatInterval; // @synthesize heartbeatInterval=_heartbeatInterval;
@property(nonatomic) int mStartDevScene; // @synthesize mStartDevScene=_mStartDevScene;
@property(nonatomic) int mCntTryStartAudioDev; // @synthesize mCntTryStartAudioDev=_mCntTryStartAudioDev;
@property(retain, nonatomic) MMTimer *mFrequentAckTimer; // @synthesize mFrequentAckTimer=_mFrequentAckTimer;
@property(retain, nonatomic) MMTimer *mFrequentEnterTimer; // @synthesize mFrequentEnterTimer=_mFrequentEnterTimer;
@property(retain, nonatomic) MMTimer *wxHeartbeatTimeoutTimer; // @synthesize wxHeartbeatTimeoutTimer=_wxHeartbeatTimeoutTimer;
@property(retain, nonatomic) MMTimer *mSystemCallHoldTimer; // @synthesize mSystemCallHoldTimer=_mSystemCallHoldTimer;
@property(nonatomic) struct __sFILE *recordDumpFile; // @synthesize recordDumpFile=_recordDumpFile;
@property(retain, nonatomic) MMTimer *wxCheckTalkStatusMoreSensitiveTimer; // @synthesize wxCheckTalkStatusMoreSensitiveTimer=_wxCheckTalkStatusMoreSensitiveTimer;
@property(retain, nonatomic) MMTimer *wxCheckTalkStatusTimer; // @synthesize wxCheckTalkStatusTimer=_wxCheckTalkStatusTimer;
@property(retain, nonatomic) MMTimer *wxTalkTimer; // @synthesize wxTalkTimer=_wxTalkTimer;
@property(retain, nonatomic) NSRecursiveLock *audioDecLock; // @synthesize audioDecLock=_audioDecLock;
@property(retain, nonatomic) NSRecursiveLock *audioEncLock; // @synthesize audioEncLock=_audioEncLock;
@property(retain, nonatomic) WXTalkComponent *component; // @synthesize component=_component;
@property(retain, nonatomic) WXCTalkRoomData *roomData; // @synthesize roomData=_roomData;
@property(nonatomic) int mNetSceneState; // @synthesize mNetSceneState=_mNetSceneState;
@property(nonatomic) unsigned int mNextBannerClickTimeLimit; // @synthesize mNextBannerClickTimeLimit;
@property(nonatomic) _Bool mIsTalkingInterrupt; // @synthesize mIsTalkingInterrupt;
@property(nonatomic) _Bool mIsInTalking; // @synthesize mIsInTalking;
- (void).cxx_destruct;
- (void)handleGetGroupInfoBatchResponse:(id)arg1 retCode:(int)arg2 seqNo:(int)arg3;
- (void)handleVoiceMemberWhisperResponse:(id)arg1 retCode:(int)arg2;
- (_Bool)requestActiveGroupInfoItemList:(id)arg1;
- (void)doTalkStateReport;
- (_Bool)isTalkSessionActive;
- (void)onRespData:(id)arg1 taskId:(int)arg2 retCode:(int)arg3 retBuf:(id)arg4 backfillData:(id)arg5;
- (void)engineDoMemberChanged:(id)arg1;
- (_Bool)judgeIsCurrSessionBanner:(id)arg1;
- (_Bool)judgeIsCurrSessionMsg:(id)arg1;
- (_Bool)isMultiTalkMsgWithType:(int)arg1;
- (void)handleMemberChangeMsgWithCurrSession:(id)arg1 memberChangeType:(int)arg2;
- (void)handleTalkMsgsWithNotFriend:(id)arg1;
- (void)handleBannerMsg:(id)arg1;
- (void)handleTalkMsgs:(id)arg1;
- (_Bool)isDuplicateMsg:(id)arg1;
- (void)handleTalkInfoWithSingle2MultiInfo:(id)arg1;
- (void)handleTalkInfoWithVoiceConf:(id)arg1;
- (void)handleTalkInfoWithUsrProfileList:(id)arg1;
- (void)handleTalkInfoWithGroupInfo:(id)arg1;
- (void)handleTalkInfoChangeWithMemberList:(id)arg1 memberChangeType:(int)arg2 needNotifyMemberChange:(_Bool)arg3;
- (_Bool)isCurrentRoom:(id)arg1 roomId:(unsigned int)arg2 roomKey:(unsigned long long)arg3 isOnlyCheckGroupId:(_Bool)arg4;
- (int)getRouteIdByGroupId:(id)arg1;
- (void)setNetSceneState:(int)arg1;
- (_Bool)getIsOnlyCheckGroupIdByEnterType:(int)arg1;
- (_Bool)isInTalkSession;
- (id)getMemberQualityInfoList;
- (id)getCurTalkingMemberList;
- (_Bool)holdMultiTalk:(_Bool)arg1 holdType:(int)arg2;
- (void)doFrequentEnter;
- (void)doFrequentAck;
- (void)stopFrequentEnter;
- (void)stopFrequentAck;
- (void)handleClientSceneReportResponse:(id)arg1 retCode:(int)arg2;
- (void)handleRedirectResponse:(id)arg1 retCode:(int)arg2 backfillData:(id)arg3;
- (void)sendRedirectReq;
- (int)getSelfRoomMemberId;
- (void)sendClientSeceneReport:(unsigned int)arg1;
- (void)notifyModifyGroupInfoResult:(_Bool)arg1 groupId:(id)arg2;
- (void)handleModifyGroupInfoResponse:(id)arg1 retCode:(int)arg2 groupId:(id)arg3;
- (void)handleHeartBeatResponse:(id)arg1 retCode:(int)arg2;
- (void)handleInviteWXTalkModeRequest:(id)arg1 retCode:(int)arg2 backfillData:(id)arg3;
- (_Bool)sendInviteWXTalkModeRequest:(id)arg1;
- (void)handleCreateWXTalkModeResponse:(id)arg1 retCode:(int)arg2 origReqData:(id)arg3;
- (_Bool)sendCreateWXTalkModeRequest:(id)arg1 clientGroupId:(id)arg2 uniqueSdkTalkID:(id)arg3 voiceGroupInfo:(id)arg4 single2MultiInfo:(id)arg5 routeId:(int)arg6;
- (void)handleWXTalkVideoModeRequest:(id)arg1 retCode:(int)arg2 origReqData:(id)arg3;
- (_Bool)sendWXTalkVideoModeRequest:(id)arg1 roomId:(unsigned int)arg2 roomKey:(unsigned long long)arg3 Action:(int)arg4;
- (_Bool)sendRejectEnterWXTalkModeRequest:(id)arg1 roomId:(unsigned int)arg2 roomKey:(unsigned long long)arg3 reason:(int)arg4;
- (void)handleExitTalkRoomResponse:(id)arg1 retCode:(int)arg2 backfillData:(id)arg3;
- (void)SendExitTalkRoomRequest:(int)arg1;
- (void)SendExitTalkRoomRequest:(int)arg1 groupId:(id)arg2 roomId:(unsigned int)arg3 roomKey:(unsigned long long)arg4 routeId:(int)arg5;
- (void)handleCancelCreateTalkRoomResponse:(id)arg1 retCode:(int)arg2 backFillData:(id)arg3;
- (void)sendCancelCreateRequest:(int)arg1;
- (void)handleEnterTalkRoomResponse:(id)arg1 retCode:(int)arg2 origReqData:(id)arg3;
- (_Bool)SendEnterTalkRoomRequestWithReqInfo:(id)arg1;
- (_Bool)SendEnterTalkRoomRequest:(int)arg1;
- (void)handleCreateNotifyAckResponse:(id)arg1 retCode:(int)arg2 origReqData:(id)arg3;
- (void)sendCreateNotifyAckRequest:(id)arg1 roomKey:(unsigned long long)arg2 roomId:(unsigned int)arg3;
- (void)sendCreateNotifyAckRequest:(id)arg1 roomKey:(unsigned long long)arg2 roomId:(unsigned int)arg3 isFrequent:(_Bool)arg4;
- (int)getRemoteQualityInfoList:(void *)arg1 qualityLen:(int)arg2;
- (id)getLocalCapInfo;
- (void)reportClientScene:(unsigned int)arg1;
- (_Bool)sendResumeFriendOrSendPokerToFriend:(id)arg1 friendUserName:(id)arg2 extData:(id)arg3;
- (void)notifysendResumeFriendOrSendPokerToFriendResult:(_Bool)arg1 groupId:(id)arg2;
- (void)modifyGroupInfo:(id)arg1 newName:(id)arg2;
- (_Bool)rejectWXTalkMode:(id)arg1 roomId:(unsigned int)arg2 roomKey:(unsigned long long)arg3 reason:(int)arg4;
- (_Bool)inviteTalkMembers:(id)arg1 memberUuids:(id)arg2;
- (int)genSdkUniqueRouteId:(id)arg1;
- (int)genRouteId;
- (_Bool)createWXTalkMode:(id)arg1 voiceGroupInfo:(id)arg2 single2MultiInfo:(id)arg3 clientGroupId:(id)arg4 uniqueSdkTalkID:(id)arg5 routeId:(int)arg6;
- (_Bool)createWXTalkMode:(id)arg1;
- (id)getCreateVoiceGroupInfo:(int)arg1 togetherId:(unsigned long long)arg2;
- (id)prepareCreateWXTalkMode:(id)arg1 voiceGroupInfo:(id)arg2 single2MultiInfo:(id)arg3 uniqueSdkTalkID:(id)arg4 clientGroupId:(id)arg5;
- (void)closeWXTalkModeWithErrorType:(int)arg1 errorNo:(int)arg2 groupUserName:(id)arg3;
- (void)closeWXTalkMode;
- (void)exitWXTalkRoom:(int)arg1 groupId:(id)arg2;
- (void)exitWXTalkRoom:(int)arg1;
- (void)exitCurMutilTalkRoom:(id)arg1;
- (void)onInvitedTalkMode:(id)arg1 roomId:(unsigned int)arg2 roomKey:(unsigned long long)arg3;
- (_Bool)openWXTalkMode:(id)arg1 roomId:(unsigned int)arg2 roomKey:(unsigned long long)arg3 enterType:(int)arg4;
- (_Bool)canEnterThisRoom:(id)arg1;
- (_Bool)isOpenAnyWXTalkMode;
- (void)resetData;
- (void)onServiceClearData;
- (void)onPreQuit;
- (void)onServiceInit;
- (void)dealloc;
- (void)registerNotifications;
- (void)UnInitAll;
- (void)InitAll;
- (void)heartbeatTimeoutFire;
- (void)stopHeartbeatTimeoutTimer;
- (void)restartHeartbeatTimeoutTimer;
- (void)OnNotifyMP:(long long)arg1 Param:(int)arg2 ViewId:(int)arg3;
- (void)OnReportChannel:(id)arg1;
- (void)OnReportEngineSend:(id)arg1;
- (void)OnReportEngineRecv:(id)arg1 memberId:(int)arg2;
- (void)onReceOtherMemberData;
- (void)OnEngineError:(int)arg1;
- (void)OnOpenEngineSuccess;
- (void)OnNetworkChanged:(id)arg1;
- (void)NotifyMainThreadEngineError:(id)arg1;
- (void)NotifyMainThreadDataConnected;
- (void)EngineAudioConfig;
- (void)StopSession;
- (void)RedirectTo:(id)arg1 withEngineConf:(id)arg2 withHeadSignArray:(id)arg3 withIsEncode:(_Bool)arg4 withTCPSvrArr:(id)arg5 withTCPStartTime:(int)arg6;
- (void)StartSession:(id)arg1 withEngineConf:(id)arg2 withHeadSignArray:(id)arg3 withIsEncode:(_Bool)arg4 withTCPSvrArr:(id)arg5 withTCPStartTime:(int)arg6;
- (void)onAllNetworkChange:(id)arg1;
- (void)CloseRecordDumpFile;
- (void)CreateRecordDumpFile;
- (void)TimerCheck;
- (void)SendHeartBeatRequest;
- (_Bool)checkFriendHasEnterRoom;
- (void)WXCReachabilityChange:(unsigned int)arg1;
- (void)audioDeviceUnPluginHeadset:(id)arg1;
- (void)audioDevicePluginHeadset:(id)arg1;
- (void)audioDeviceStartedSuccess:(id)arg1;
- (void)OnAudioDeviceStartedSuccess;
- (void)audioDeviceStartedFail:(id)arg1;
- (void)OnAudioDeviceStartedFail;
- (void)audioDeviceForceStop:(id)arg1;
- (void)ForceStop;
- (void)getMutilTalkTotalFlow:(int *)arg1 andWwanBytes:(int *)arg2;
- (int)VideoEncAndSend:(char *)arg1 Length:(unsigned int)arg2 Format:(void *)arg3 resolutionMode:(int)arg4 cameraMode:(int)arg5;
- (void)closeVideoRecvAndSend;
- (void)setVideoOn:(_Bool)arg1;
- (void)setMicroPhoneMute:(_Bool)arg1;
- (void)keepSpeakerPhoneStatusWhenDeviceStart:(_Bool)arg1;
- (_Bool)getSpeakerPhoneStatus;
- (void)setSpeakerPhone:(_Bool)arg1;
- (void)restartMultiTalkAudioDeviceInMainThread;
- (void)delayRestartMultiTalkAudioDevice;
- (void)doRestartMultiTalkAudioDevice;
- (void)resumeVoiceTalkAfterSysCall:(_Bool)arg1;
- (void)beginAudioInterrupt:(_Bool)arg1;
- (void)delayRestartVoiceTalk;
- (void)stopSystemCallHoldTimer;
- (void)onSystemCallHoldTimeOut;
- (void)startSystemCallHoldTimer;
- (void)SysCallEndNotify;
- (void)BeginInterruption:(_Bool)arg1;
- (int)AudioDevGetData:(char *)arg1 length:(unsigned int)arg2;
- (int)AudioDevPutData:(char *)arg1 length:(unsigned int)arg2;
- (_Bool)isGetDataReady;
- (void)DumpToRecordFile:(char *)arg1 withDataLen:(unsigned int)arg2;
- (_Bool)StartRecordAndPlayAudioForVoip:(int)arg1;
- (void)StopTalk;
- (void)StartTalk;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

